<!DOCTYPE html>
<html lang="en" class="keep-it-100">
<head>

    <link rel="stylesheet" type="text/css" href="/html/css/bulma.min.css" >
    <link rel="stylesheet" type="text/css" href="/html/css/blocks.css" >
	<script type="application/javascript" src="/html/js/vue.js"></script>
	<script type="application/javascript" src="/html/js/palette.js"></script>





	<style>

		.per, .identity, .rdftype{
			background-color: whitesmoke;
			margin-bottom: 1em;
			padding: 1em;
			display: flex

		}
		.identity button, .rdftype button{
			margin-left: 5px;
			margin-right: 5px;
		}
		.per div{
			flex:3;
		}
		.per button{
			flex:1;
		}
		.block{
			position: relative;
		}
		.blockRullLink{
position: absolute;
    right: 0;
    bottom: 0;		
    display: none;	
		}

		.block:hover .blockRullLink{
		    display: block;
		}


		.block-word:hover{

			background-color: tomato;
		}
		.word-highlight{

			background-color: rgba(6, 0, 255, 0.2901960784313726);
		}
		.block-hide{
			display: none;
		}
		.sub-menu{
			margin-top: 1em;
			margin-bottom: 1em;
		}
		#search-blocks{
			font-size: 1.5rem;
			display: block;
			margin-top: 10px;
			margin-bottom: 10px;
			width: 99%;			
		}

		.blockSelect span:hover{
			background-color: tomato;
		}


	</style>
</head>
<body class="container is-fluid keep-it-100">


	<div id="app">

		<div class="columns keep-it-100">




			<div class="column keep-it-100 is-two-third" id="blocks-holder">

				<a href="dump" class="button">download</a>
				<button v-on:click="save()" class="button">save</button>

				<a href="export" style="float:right" target="_blank" class="button">export</a>
			</hr>

				<input id="search-blocks" type="text" @keyup="updateSearchBlocks($event)" placeholder="Search blocks">


			    <div :style="wordSelect ? {'cursor': 'crosshair'} : {}" v-bind:class="{'block-highlight': block.highlight, 'block-hide': block.highlight===false, 'block': true, 'blockSelect':wordSelect}"  v-for="(block) in sortedBlocksNerParsed">
			      <a href="#" @click="setRuleBlock(block.order, $event)" class="blockRullLink">Block {{block.order}}</a>


			      <span  @click="manualAddWordToIdentity(block.order,indexBlockWord)" v-bind:class="{'word-highlight': blockWord.highlight}" :style="[wordIndexLookup[`${block.order}-${indexBlockWord}`] ? {'border-bottom-color': '#' + wordIndexLookup[block.order + '-' + indexBlockWord], 'border-bottom-style': 'solid', 'border-bottom-width': '3px', 'background-color': 'white'} : {} ]"  v-for="(blockWord, indexBlockWord) in block.wordIndex">{{blockWord.word}} </span>
			    </div>


			</div>

			<div class="column keep-it-100 is-one-third" id="filters-holder">

				<button v-on:click="sideBar = 'identity'" class="button is-info">Identities</button>

				<button v-on:click="sideBar = 'ner'" class="button is-warning">NER</button>
				<button v-on:click="sideBar = 'type'" class="button is-primary">rdf:type</button>
				<button v-on:click="sideBar = 'rules'" class="button is-success">Export Rules</button>


				<div class="sub-menu" v-if="sideBar=='identity'">
					<button v-on:click="makeBlankIdentity()" class="button is-small">Add Identity Manually</button>
					<div class="identity"  v-for="i in doc.identities">
						<span @click="selectWords(i.id)" v-bind:style="{'display':'inline-block','height':'25px','width':'25px','background-color':'#' + i.color, 'font-size':'25px', 'border': (wordSelect===i.id) ? 'solid 4px tomato' : 'none', 'margin-right': '0.5em' }"></span><span>{{i.label}}</span>
						<button @click="deleteIdentity(i.id)" class="button is-small" title="Delete">Delete</button>
						<button @click="assignUri(i.id)" v-bind:style="{'background-color': (!i.uri) ? 'coral' : ''}" class="button is-small" title="Delete">URI</button>
				      	<div><select @change="assignRdfType(i,$event)">
				      		<option>Assign Type</option>
				      		<option v-for="r in doc.rdftypes" :selected="i.type===r.name">{{r.name}}</option>
				      	</select></div>
					</div>
				</div>

				<div class="sub-menu" v-if="sideBar=='type'" >
					<button v-on:click="addType()" class="button is-small">Add Type</button>
					<div class="rdftype"  v-for="r in doc.rdftypes">
						<span>{{r.name}}</span>
						<button @click="deleteType(r.id)" class="button is-small" title="Delete">Delete</button>
					</div>

				</div>
				<div class="sub-menu" v-if="sideBar=='rules'" >

						<span>Span:</span><select @change="changeRules('block',$event)">
				      		<option>All</option>
				      		<option v-for="i in sortedBlocksNerParsed" :selected="rulesBlock===i.order">{{i.order}}</option>
				      	</select>
				      	<br/>

						<select  @change="changeRules('subject',$event)">
				      		<option>Subject</option>
				      		<option v-for="i in doc.identities" :selected="rulesSubject===i.id">{{i.label}}</option>

				      	</select>

						<input type="text"  @change="changeRules('predicate',$event)" :value="rulesPredicate" placeholder="Predicate URI" name="">


						<select @change="changeRules('object',$event)">

				      		<option>Type of Object</option>
				      		<option v-for="r in doc.rdftypes" :selected="rulesObject===r.id">{{r.name}}</option>

				      	</select>


						<button v-on:click="addRule()" class="button is-small">Add</button>

						<hr>

			    		<div class="per"  v-for="rule in doc.exportRules">
			    			Block {{rule.block}}:<br>
			    			<code>
			    				&lt;{{rule.subject}}&gt;
			    				&lt;{{rule.predicate}}&gt;
			    				&lt;{{rule.object}}&gt;

			    			</code>
			    			<button style="width:50px;" v-on:click="delRule(rule.id)">Del</button>


			    		</div>

				</div>

				<div class="sub-menu" v-if="sideBar=='ner'" >
					<button v-on:click="clearHighlight()" class="button is-small">Clear Highlight</button>
					<button v-on:click="clearHidden()" class="button is-small">Show Hidden</button>
					<input type="text" placeholder="search ner" style="height: 27px;" @keyup="updateFilter($event)">
					<select style="height: 26px; background-color: white;" @change="filterNerType($event)">
						<option>Filter Type</option>
						<option v-for="r in sideBarNerTypeOptions" :selected="sideBarNerType===r">{{r}}</option>
					</select>



				</div>

				

			    <div class="per"  v-if="sideBar=='ner' && per.hidden != true && per.type == sideBarNerType && (nerFilter && per.text.toLowerCase().indexOf(nerFilter.toLowerCase()) > -1 || !nerFilter )" v-for="per in nerCompiledPeopleSorted">

					<div>{{per.count}} {{per.text}}</div>
			      	
			      	<button @click="highlight(per)" class="button is-small" title="Show in Doc">S</button>
			      	<button @click="per.hidden=true" class="button is-small" title="Hide from List">H</button>
			      	<button v-on:click="makeIdentity(per)" class="button is-small" title="Create Identity">I</button>
			      	<div><select @change="assignIdentity(per,$event)">
			      		<option>Assign To Identity</option>
			      		<option v-for="i in doc.identities" :selected="per.text===i.label">{{i.label}}</option>
			      	</select></div>

			    </div>



			</div> 
		</div>

		
	</div>

<!-- 
    



		



	 -->


	<!-- <script type="application/javascript" src="/html/js/edit.js"></script> -->


	<script>
		

	</script>





    <script>

   		var config = <%- config %>;

    	var doc = <%- docjson %>;



    	var nerCompiledPeople = {}
    	var sideBarNerTypeOptions = []

    	// var blockCount = 0
    	doc.blocksNerParsed.forEach((b)=>{
    		b.results.forEach((r)=>{
    			if (r.confidence >= 50){
    				
    				if (!nerCompiledPeople[r.text]){
    					nerCompiledPeople[r.text] = {id: Object.keys(nerCompiledPeople).length, identity: null, count:0,occ:[], identity:null, hidden:false}
    				}

    				nerCompiledPeople[r.text].count++
    				nerCompiledPeople[r.text].text = r.text;
    				nerCompiledPeople[r.text].type = r.typeMode;
    				if (sideBarNerTypeOptions.indexOf(r.typeMode)==-1){
    					sideBarNerTypeOptions.push(r.typeMode)
    				}
    				nerCompiledPeople[r.text].occ.push({block:b.order,index:r.matchIndex})

    			}

    		})
    		

    		// blockCount++;
    	})


    	if (doc.nerCompiledPeopleSorted.length>0){
    		var nerCompiledPeopleSorted = doc.nerCompiledPeopleSorted
    	}else{

    		var nerCompiledPeopleSorted = Object.values(nerCompiledPeople).sort((a, b) =>  b.count - a.count);

    	}

    	

    	if (!doc.identities){
    		doc.identities = []
    	}
    	if (!doc.rdftypes){
    		doc.rdftypes = []
    	}
    	if (!doc.exportRules){
    		doc.exportRules = []
    	}

    	// some defaults
    	if (doc.rdftypes.map((t)=>{return t.name}).indexOf('Person')==-1){
    		doc.rdftypes.push(
    			{
	    		id: 1,
	    		name: 'Person',
	    		uri: 'https://www.wikidata.org/entity/Q5'
	    	}
	    	)
    	}
    	if (doc.rdftypes.map((t)=>{return t.name}).indexOf('Location')==-1){
    		doc.rdftypes.push(
    		{
	    		id: 2,
	    		name: 'Location',
	    		uri: 'https://www.wikidata.org/entity/Q2221906'
	    	}
	    	)
    	}
    	if (doc.rdftypes.map((t)=>{return t.name}).indexOf('Artwork')==-1){
    		doc.rdftypes.push(
    		{
	    		id: 3,
	    		name: 'Artwork',
	    		uri: 'https://www.wikidata.org/entity/Q838948'
	    	}
	    	)
    	}    	

    	// console.log(doc)
   

		var app = new Vue({
		  el: '#app',
		  data: {
		  	doc:doc,
		  	nerCompiledPeopleSorted: nerCompiledPeopleSorted,
		  	sideBar: null,
		  	sideBarNerType: "per",
		  	sideBarNerTypeOptions:sideBarNerTypeOptions,
		  	showOn: false,
		  	wordIndexLookup:{},
		  	nerFilter: null,
		  	blocksSearch: null,
		  	wordSelect: false,
		  	manualIdentitiesIdCounter : 1000,
		  	rulesBlock: "All",
		  	rulesSubject: "Type of Subject",
		  	rulesObject: "Object",
		  	rulesPredicate: "",



		  },
			computed: {
			  sortedBlocksNerParsed: function() {
			    function compare(a, b) {
			      if (a.order < b.order)
			        return -1;
			      if (a.order > b.order)
			        return 1;
			      return 0;
			    }

			    return this.doc.blocksNerParsed.sort(compare);
			  }
			},


		  mounted:function(){
		        this.buildWordIndexLookup() //method1 will execute at pageload
		  },
			methods: 
			  { 

			  	save: function(){

			  		var doc = this.$data.doc
			  		// console.log(doc)
					var xhr = new XMLHttpRequest();
					xhr.open("POST", "/saveedit", true);
					xhr.setRequestHeader('Content-Type', 'application/json');
					xhr.onload = function () {
					    // do something to response
					    // console.log(this.responseText);

					    var oldItems = JSON.parse(localStorage.getItem('selavySaved')) || [];

					    oldItems.push(doc.id)
					    localStorage.setItem('selavySaved', JSON.stringify(oldItems));

				

					}

					
					xhr.send(JSON.stringify({
						id:doc.id,
					    identities: doc.identities,
					    rdftypes: doc.rdftypes,
					    nerCompiledPeopleSorted: nerCompiledPeopleSorted,
					    exportRules: doc.exportRules
					}));

			  	},

			  	updateSearchBlocks: function(event) {
					if (this.timeout) clearTimeout(this.timeout); 
						this.timeout = setTimeout(() => {
							// your action
					  		this.$data.blocksSearch = event.target.value
							var searchFor = this.$data.blocksSearch.toLowerCase()  
							
							if (searchFor.trim()==''){
								

								this.$data.doc.blocksNerParsed.forEach((b)=>{
					     			Vue.set(b,'highlight',true)
					     			b.wordIndex.forEach((w)=>{Vue.set(w,'highlight',false)})
								})	



							}else{

						     	this.$data.doc.blocksNerParsed.forEach((b)=>{
						     		if (b.text.toLowerCase().indexOf(searchFor) > -1){
						     			Vue.set(b,'highlight',true)
						     			b.wordIndex.forEach((w)=>{
						     				if (w.word.toLowerCase().indexOf(searchFor)>-1){
						     					Vue.set(w,'highlight',true)	
						     					// console.log(w)
						     				}else{
						     					Vue.set(w,'highlight',false)	
						     				}
						     			})

						     		}else{
						     			Vue.set(b,'highlight',false)
						     			b.wordIndex.forEach((w)=>{Vue.set(w,'highlight',false)})
						     		}
						     	})


							}



					}, 500);
				},

				manualAddWordToIdentity: function(block,word){

					if (this.$data.wordSelect !== false){
						// console.log(block,word)
						// console.log(word,this.$data.wordSelect)
						// console.log(this.$data.wordIndexLookup)
						// console.log(this.$data.doc.identities)
						// console.log(doc,"<<<")



						var targetI = this.$data.doc.identities.filter( i => i.id == this.$data.wordSelect)[0]
						targetI.manualWords.push({'b':block,'w':word})

						// console.log(">>>>>>>>!!!",targetI)
						this.buildWordIndexLookup()

					}else{

						// check to see if this word is in possiblities
						if (!this.$data.wordIndexLookup[block+'-'+word]){
							return false
						}

						// remove word
						if (confirm('Do you want to unlink this word from all identities?')){


				  			this.$data.nerCompiledPeopleSorted.forEach((n)=>{
				  					let replacement = []

				  					n.occ.forEach((b)=>{

				  						console.log(block, b.block, word, b.index.join(','), b.index.map((v)=>{return v.indexOf(word);}), b.index.indexOf(word), b.index.indexOf(word.toString()) )
				  						
				  						if (block.toString() == b.block.toString() && word.toString() == b.index.join()){
				  							// we are not adding this one because it matches
				  						}else{


				  							if (block.toString() == b.block.toString()){
					  							var replacementObv = []
					  							var needsReplacement = false
					  							b.index.forEach((wordval)=>{
					  								console.log("\t",wordval)
					  								var tempAry = []
					  								wordval.forEach((wordvalVal)=>{

					  									if (wordvalVal==word){
					  										needsReplacement = true
					  										// console.log(block,b.block)
					  										// console.log("\t",wordval)
					  										// console.log("\t\t",wordvalVal)
					  									}else{
					  										tempAry.push(wordvalVal)
					  										
					  									}


					  								})
					  								replacementObv.push(tempAry)
					  							})

					  							if (needsReplacement){
					  								b.index = replacementObv
					  							}

				  							}

				  							replacement.push(b)
				  						}
				  						
				  					})

				  					n.occ = replacement


				  			})

				  			// do the manual words
				  			this.$data.doc.identities.forEach((i)=>{
				  				let replacement = []
				  				i.manualWords.forEach((mw)=>{
			  						if (block.toString() == mw.b.toString() && word.toString() == mw.w.toString()){
			  							// we are not adding this one because it matches
			  						}else{
			  							replacement.push(mw)
			  						}
				  				})

				  				i.manualWords = replacement
				  			})

				  			this.buildWordIndexLookup()

						}



					}	

				},
			  	changeRules: function(pieceOfRule, event){

			  		if (pieceOfRule == 'block'){
			  			this.$data.rulesBlock = event.target.value

			  		}else if(pieceOfRule == 'object'){
			  			this.$data.rulesObject = event.target.value

			  		}else if(pieceOfRule == 'predicate'){
			  			this.$data.rulesPredicate= event.target.value
			  		}else if(pieceOfRule == 'subject'){
			  			this.$data.rulesSubject  = event.target.value
			  		}
			  		

			  	},

			  	addRule: function(event){


			  		this.$data.doc.exportRules.push({
			  			block:this.$data.rulesBlock,
			  			subject: this.$data.rulesSubject,
			  			predicate: this.$data.rulesPredicate,
			  			object: this.$data.rulesObject,
			  			id: (this.$data.doc.exportRules.length+1)
			  		})

			  	},
			  	delRule: function(ruleId){


			  		this.$data.doc.exportRules = this.$data.doc.exportRules.filter( i => i.id != ruleId)

			  	},


			  	setRuleBlock: function(blockId,event){
			  		// console.log(blockId,event)
			  		this.$data.rulesBlock = blockId
			  		event.preventDefault()

			  	},
			  	
			  	updateFilter: function(event){

			  		this.$data.nerFilter = event.target.value

			  	},
			  	buildWordIndexLookup: function(){

			  		this.$data.wordIndexLookup = {}

			  		this.$data.doc.identities.forEach((i)=>{
			  			this.$data.nerCompiledPeopleSorted.forEach((n)=>{
			  				if (i.linkedIdentities.indexOf(n.id)>-1){
			  					n.occ.forEach((b)=>{
			  						b.index.forEach((idx)=>{
			  							idx.forEach((w)=>{			  								
			  								this.$data.wordIndexLookup[b.block + '-' + w] = i.color
			  							})
			  						})
			  					})
			  				}
			  			})
			  			// and the manual parts
			  			i.manualWords.forEach((pos)=>{
			  				this.$data.wordIndexLookup[pos.b + '-' + pos.w] = i.color

			  			})

			  		})
			  	},


			  	addType : function(){

			  		let name = prompt("What is the type name or label?")
			  		let uri = prompt("What is the type's URI")
			  		let id = this.$data.doc.rdftypes.length+1

			  		if (!name || !uri || !id){
			  			return false
			  		}

			  		this.$data.doc.rdftypes.push({
			  			id: id,
			  			name: name,
			  			uri:uri
			  		})



			  	},			  	
			  	assignRdfType: function(ident,event){

			  		var targetValue = event.target.value
			  		var targetI = this.$data.doc.identities.filter( i => i.id == ident.id)[0]

			  		targetI.type = event.target.value

			  		// console.log(ident)
			  		// console.log(targetI)


			  	},

			  	assignIdentity: function(per,event){



			  		var targetValue = event.target.value


			  		if (targetValue=='Assign To Identity'){

			  			// make sure it is not being used elsewhere
						this.$data.doc.identities.forEach((i)=>{
							i.linkedIdentities = i.linkedIdentities.filter(n => n != per.id)		
						})			  			

						return
			  		}


			  		// we want to add to this one
			  		var targetI = this.$data.doc.identities.filter( i => i.label == targetValue)
			  		if (targetI[0]){
						this.$data.doc.identities.forEach((i)=>{
							i.linkedIdentities = i.linkedIdentities.filter(n => n != per.id)		
							// add it to the right one
							if (i.id == targetI[0].id){
								i.linkedIdentities.push(per.id)
							}
						})
			  		}

			  		// console.log(this.$data.doc.identities)
			  		
			  		this.buildWordIndexLookup()

			  	},
			  	deleteIdentity : function(id)
			    {
			    	this.$data.doc.identities = this.$data.doc.identities.filter(i => i.id != id);
			    },	
			  	deleteType : function(id)
			    {
			    	this.$data.doc.rdftypes = this.$data.doc.rdftypes.filter(i => i.id != id);
			    },	

			    filterNerType: function(event){

			    	this.$data.sideBarNerType = event.target.value
			    },


			    assignUri : function(id){
			    	this.$data.doc.identities.forEach((i)=>{
			    		if (i.id.toString() == id.toString()){
			    			let uri = ""
			    			if (i.uri){
			    				uri = i.uri
			    			}
			    			let newUri = prompt('Assign URI',uri)
			    			if (newUri){
			    				i.uri = newUri
			    			}
			    		}
			    	})

			    },

			    selectWords : function(id){

			    	if (this.$data.wordSelect){
			    		this.$data.wordSelect = false
			    	}else{
			    		this.$data.wordSelect = id
			    	}
			    	

			    },

			    makeBlankIdentity: function(){

			    	let name = prompt("Enter the name for this identitiy")
			    	if (!name){
			    		return false
			    	}

			    	this.makeIdentity(
			    		{
			    			count: 0,
			    			hidden: false,
			    			id: this.$data.manualIdentitiesIdCounter++,
			    			identity: null,
			    			occ: [],
			    			text: name
			    		}

			    	)

			    },
			    makeIdentity : function(per)
			    {	
			    	// console.log("--->",per)
			    	
			    	var names = this.$data.doc.identities.map((x)=>{return x.label})
			    	// console.log(names)

			    	if (names.indexOf(per.text)>-1){
			    		alert("You already have a " + per.text + ' in the identites')
			    		return false
			    	}

			    	var seq = palette('all', ++this.$data.doc.identities.length);


			    	// var identities = this.$data.doc.identities
			    	this.$data.doc.identities.push({color: seq[this.$data.doc.identities.length-1], type:null, uri: false, blocks:[], linkedIdentities:[per.id],label:per.text,id:++this.$data.doc.identities.length, manualWords:[]})
			    		
			    	this.$data.doc.identities = this.$data.doc.identities.filter(Boolean);

			    	this.$data.nerCompiledPeopleSorted.forEach((n)=>{
			    		if (n.id == per.id){
			    			n.identity = per.text
			    		}
			    	})

			    	// console.log(this.$data.nerCompiledPeopleSorted)


			    	// Vue.set(this.$data.doc,'identities',identities)
			    	// console.log(this.$data.doc.identities)
			    	this.buildWordIndexLookup()
			    },
	 			clearHidden : function(){
			     	this.$data.nerCompiledPeopleSorted.forEach((b)=>{
			     		Vue.set(b,'hidden',false)
			     	})
			  	 },

			  	 clearHighlight : function(){
			     	this.$data.doc.blocksNerParsed.forEach((b)=>{
			     		// console.log(b)
			     		Vue.set(b,'highlight',undefined)
			     		b.wordIndex.forEach((w)=>{Vue.set(w,'highlight',undefined)})
			     	})
			  	 },
			     highlight : function(target)
			     {

			     	this.$data.doc.blocksNerParsed.forEach((b)=>{
			     		Vue.set(b,'highlight',false)
			     		b.wordIndex.forEach((w)=>{Vue.set(w,'highlight',false)})
			     	})
			     	// console.log("This is the target")
			     	// console.log(target)
			     	target.occ.forEach((o)=>{

			     		Vue.set(this.$data.doc.blocksNerParsed[o.block],'highlight',true)

			     		o.index.forEach((i)=>{

			     			
			     			i.forEach((ii)=>{

			     				Vue.set(this.$data.doc.blocksNerParsed[o.block].wordIndex[ii],'highlight',true);
			     				// this.$data.doc.blocksNerParsed[o.block].wordIndex[ii].word='[' + this.$data.doc.blocksNerParsed[o.block].wordIndex[ii].word + ']';
			     			});

			     		})
			     		

			     	})
			        
			     }
			  }


		})




    	// renderBlocks(doc.blocksNerParsed)
    </script>

</body>




</html>